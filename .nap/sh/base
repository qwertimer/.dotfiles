#!/bin/bash

###
#This script outlines the basic code structure that should be applied to all scripts written in bash. It helps to improve documentation by adding help functionality, it adds tab completion. It also adds delegation in which the commands you run are actually subcommands of the main program.

###


# ----------------------------- Global variables -----------------------------

HELP_BROWSER=lynx


##Help command structure.
help[command]='Put description here'


# ---------------------------- help functionality ----------------------------
_make_html() {
  local name=${1:-main}
  local title="$EXE $name"
  [[ $name = main ]] && title="$EXE"
  pandoc -s --metadata title="$title" \
    -o "/tmp/$name-help.html" <<< "${help[$name]}"
}

x_help() { 
  local name=${1:-main} 
  local file="/tmp/$name-help.html"
  if [[ -n "$HELP_BROWSER" ]];then
    _make_html "$name"
    exec "$HELP_BROWSER" "$file"
  else
    pandoc -s -t plain  <<< "${help[${1:-main}]}" | more
  fi
}

# ------------------------------ bash completion -----------------------------

while read -r line; do
  [[ $line =~ ^declare\ -f\ _ ]] || contine
  COMMANDS+=( ${line##declare -f _} )
done < <(declare -F)


if [[ -n $COMP_LINE ]]; then

    for c in "${COMMANDS[@]}"; do
        [[ ${c:0:${#2}} == "${2,,}" ]] && echo "$c"
    done
fi


# ---------------------------- delegation ----------------------------

declare cmd="$1"; shift
for c in ${COMMANDS[@]}; do
    if [[ $c == "$cmd" ]]; then
      "_$cmd" "$@"
      exit $?
    fi
done
