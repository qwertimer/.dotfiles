#!/bin/bash
# shellcheck disable=SC2016
# Created By: Qwertimer
# Created On: "Sat 10 Sep 2022 15:45:28 ACST"
# Project: Create a gist and upload
: "${GITUSER:="qwertimer"}"
: "${GITBRANCH:=main}"
: "${GHREPOS:="$HOME/repos/github.com/$GITUSER"}"
: "${GIST_DIR:=$GHREPOS/gists}"
: "${EXE:="${0##*/}"}"
: "${PAGER:=more}"
: "${EDITOR:=vi}"
: "${HELP_BROWSER:=}"

declare -A HELP

gist_folder() {
  echo "MAKING DIR"
  mkdir -p "$GIST_DIR"/"$1" 
}

_alternatives() {
  # put alternative argument possibilities here
  if [[ $CMD = c ]];then
    x.create "$@"
  elif [[ $CMD = p ]];then
    x.push "$@"
  fi
}

check_dir() {
  if [ ! -d "$GIST_DIR/$1" ]; then
    read -p "Would you like me to create a gist directory\n \
at $GIST_DIR/$1 [Y/n]" yes
    case "${yes}" in
      y|yes|yep|yeppers|yeah|ok|okay)
        gist_folder $1
        ;;
      no|n)
        exit
        ;;
    esac
  fi
  GIST_FOLDER="$GIST_DIR/$1"
}

HELP[create]='Creates a new gist, the function allows the user to choose from python, go and bash scripts and will autogenerate the she bang and an author/project note at the top of the program.'

x.create() {
  PS3="Enter gist language: "

  select ITEM in python go bash; do
    case $ITEM in
      python)
        check_dir "python"
        new_gist $1 "#!/usr/bin/env python3"
        ;;
      go)
        check_dir "go" 
        new_gist $1 "//$GOROOT/bin/go run $0 $@ ; exit"
        ;;
      bash)
        check_dir 'bash'
        new_gist $1 "#!/usr/bin/env bash"
        ;;
    esac

  done
}

new_gist() {
  path="${GIST_FOLDER}/${1}"

  if [ -e "${path}" ]; then
    read -p "${1} already exists. Edit? " yes
    case "${yes}" in
      y|yes|yep|yeppers|yeah|ok|okay) exec vim "${path}"
    esac
    exit 0
  fi
  
  cat > "${path}" << EOF
$2

# Created By: Qwertimer
# Created On: "$(date)"
# Project: "$1"
EOF

  chmod +x "${path}"
  vim +2 "${path}"

  read -p "Do you wish to push? " yes
  case "${yes}" in
    y|yes|yep|yeppers|yeah|ok|okay) x.auto_push "$path";;
    no|n) exit;;
  esac
  exit 0

}
x.auto_push() {
  echo $path 
  filename="${path##*/}"
  f="${filename%.*}"
  echo $f
  gh gist create --public -d $f -f $path $path
}

HELP[push]='Creates a gist on github.'

x.push() {
  cd $GIST_DIR
  file=$(find * -type f | fzf)
  filename="${file##*/}"
  f="${filename%.*}"
  gh gist create --public -d $f -f $GIST_DIR/$file $GIST_DIR/$file
  
}

x.private_push() {
  cd $GIST_DIR
  file=$(find * -type f | fzf)
  filename="${file##*/}"
  f="${filename%.*}"
  gh gist create -d $f -f $GIST_DIR/$file $GIST_DIR/$file
  
}

x.list_local() {
  : 
}

x.list_public() {
  gh gist list --public
}


x.list_private() {
  gh gist list --secret
}

x.view_gists() {
  clear; gh gist view 
}





# -------------------------- utility command -------------------------

HELP[usage]='Displays a summary of usage.'

x.usage() {
  local -a cmds
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:1} =~ _ ]] && continue
    cmds+=("$c")
  done
  local IFS='|'
  printf "usage: %s (%s)\n" "$EXE" "${cmds[*]}"
}

# --------------------------- help command ---------------------------

HELP[help]='

```
'"$EXE"' help [COMMAND]
```

Displays specific help information. If no argument is passed displays
general help information (main). Otherwise, the documentation for the
specific argument keyword is displayed, which usually corresponds to
a COMMAND name (but not necessarily). All documentation is written in
GitHub Flavored Markdown and will displayed as a web page if `pandoc`
and `$HELP_BROWSER` are detected, otherwise, just the Markdown is sent
to `$PAGER` (default: more).

Also see `readme` and `usage` commands.
'

x.help() { 
  local name="${1:-main}" title body
  title=$(_help_title "$name") || true
  if [[ -z "$title" ]]; then
    body="${HELP[$name]}"
    title="$EXE $name"
    [[ $name = main ]] && title="$EXE"
  else
    body="${HELP[$name]}"
    body=${body#*$title}
  fi
  local file="/tmp/help-$EXE-$name.html"
  if _have pandoc ; then
    if _have "$HELP_BROWSER" && [[ -t 1 ]] ;then
      pandoc -f gfm -s --metadata title="$title" \
        -o "$file" <<< "$body"
      [[ -z "$2" ]] && cd /tmp && exec "$HELP_BROWSER" "$file"
      return 0
    fi
    pandoc -f gfm -s --metadata title="$title" \
      -t plain <<< "$body" | "$PAGER"
    return 0
  fi
  echo -e "$title\n\n$body" | "$PAGER"
}

_help_title() {
  _filter "$@" && return $?;
  local name="$1"
  while IFS= read -r line; do
    [[ $line =~ ^[:space]*$ ]] && continue
    [[ $line =~ ^#\ (.+) ]] && echo "${BASH_REMATCH[1]}" && return 0
    return 1
  done <<< "${HELP[$name]}"
}

# -------------------------- readme command --------------------------

HELP[readme]='
## Generate `README.md` File

```
'"$EXE"' readme > README.md
```

The `readme` command will output the embedded help documentation in raw
GitHub Flavored Markdown suitable for use as a `README.md` file on
GitHub or similar hosting service.'

x.readme() {
  _trim "${HELP[main]}"
  echo
  while IFS= read -r name; do
    [[ $name = main ]] && continue
    body=$(_trim "${HELP[$name]}")
    [[ $body =~ ^\# ]] || body="## The \`$name\` Command"$'\n\n'$body
    printf "%s\n\n" "$body"
  done < <(printf "%s\n" "${!HELP[@]}" | LC_COLLATE=C sort)
  echo -e "----\n\n*Autogenerated $(date)*\n"
}

_have(){ type "$1" &>/dev/null; }

_checkdep() {
  _have "$1" && return 0
  echo "'$EXE' depends on '$1' for this, but not found"
  return 1
}
_trim() {
  local it="${1#"${1%%[![:space:]]*}"}"
  echo -e "${it%"${it##*[![:space:]]}"}"
}

_filter(){
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}

_buffer() {
  [[ -n "$1" ]] && return 1
  "${FUNCNAME[1]}" "$(</dev/stdin)"
}

# --------------------- completion and delegation --------------------
#      `complete -C foo foo` > `source <(foo bloated_completion)`

while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

_have _initialize && _initialize "$@"

for c in "${COMMANDS[@]}"; do
  if [[ $c == "$EXE" ]]; then
    "x.$EXE" "$@"
    exit $?
  fi
done

if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

if _have _alternatives; then
  _alternatives "$@"
  exit $?
fi

x.usage "$@"
