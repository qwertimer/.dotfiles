#!/bin/bash


# This setup script takes all the rc files stored in this .dotfiles and symlinks them to their correct location in the system. Further to this it appends the scripts folder which is aliased to ~/.local/bin/scripts to path. By doing this we are able to make use of all the scripts developed by rwxrob and can use scripts such as newx to create our own scripts which are automatically added to this location. 

set -e 

DOT=$(pwd)

x__pathappend() {
  for ARG in "$@"; do
    test -d "${ARG}" || continue
    case ":${PATH}:" in
    *:${ARG}:*) continue ;;
    esac
    export PATH="${PATH:+"${PATH}:"}${ARG}"
    echo "$PATH"
  done
}

x_scripts() {
    
    echo "Setting Scripts variable and adding scripts to path"
	  export SCRIPTS=~/.local/bin/scripts

    test ! -d "$HOME/.local/bin" && mkdir -p "$HOME/.local/bin"
    ln -sf "$PWD/scripts" "$HOME/.local/bin/"

    echo "adding scripts to path"
    if test -e ~/.bashrc-personal; then
        x__pathappend \
            "$SCRIPTS/"
    fi
}



x_addDirs() {
    mkdir -p $HOME/.sshrc.d
    #mkdir -p $HOME/.local/share/ansible
    mkdir -p $HOME/.bash_completion.d
    mkdir -p $HOME/.config/bspwm
    mkdir -p $HOME/.config/sxhkd
    mkdir -p $HOME/.config/polybar


    #mkdir -p ~/.gnupg

}
x_bash() {

  ln -sf "$DOT/bash/.bashrc" "$HOME"
  ln -sf "$DOT/bash/.bash_prompt" "$HOME/.bash_prompt"
  ln -sf "$DOT/bash/prompt_configs" "$HOME/prompt_configs"
  ln -sf "$DOT/bash/aliases" "$HOME/.aliases"

  ## starship
  ln -sf "$DOT/bash/starship" "$HOME/.config/starship"

}

x_syms() {

  # Create symlinks.
  echo "Creating Symlinks"
# ----------------------------------- bash -----------------------------------
  ln -sf "$DOT/bash/.bashrc" "$HOME"
# --------------------------------- dircolors --------------------------------
  ln -sf "$DOT/.dircolors" "$HOME/.dircolors"
# ----------------------------------- tmux -----------------------------------
  ln -sf "$DOT/tmux/tmux.conf" "$HOME/.tmux.conf"
# ------------------------------------ vim -----------------------------------
  ln -sf "$DOT/vim/.vimrc" "$HOME/.vimrc"
  ln -sf "$DOT/vim/.vimrc" "$HOME/.sshrc.d"

  #x_wm_syms
  #x_comp_syms
}


# ---------------------------- Additional symlinks ---------------------------
x_sysutils() {

  ln -sf "$DOT/x/.xinitrc" "$HOME/.xinitrc"
  ln -sf "$DOT/x/.Xresources" "$HOME/.Xresources"
}

# ---------------------------------- sxhkd ----------------------------------
x_sxhkd() {
  _have sxhkd && ln -sf "$DOT/.config/sxhkd/" "$HOME/.config/"
}

x_wm_syms() {
  #bspwm
  _have bspwm   && ln -sf "$DOT/.config/bspwm" "$HOME/.config"
  _have polybar && ln -sf "$DOT/.config/polybar" "$HOME/.config"
  x_sxhkd
  #xmonad

}

x_fz_tools() {
  ln -sf "$DOT/bash/fztricks-bash" "$HOME/fztricks-bash"
  ln -sf "$DOT/bash/.fztricks.bash" "$HOME/.fztricks.bash"
}

x_comp_syms() {

# ---------------------------- ansible_completion ----------------------------
  ln -sf "$DOT/completions/ansible-completion/" "$HOME/.local/share/ansible/ansible-completion"

# -------------------------------- Completions -------------------------------

  ln -sf "$DOT/completions/z.sh" "$HOME/.bash_completion.d/z.sh"
  ln -sf "$DOT/completions/fz.sh" "$HOME/.bash_completion.d/fz.sh"
  ln -sf "$DOT/completions/gh/.gh_comp" "$HOME/"
}

x_usage() {
  local cmds="${COMMANDS[*]}"
  printf "usage: %s (%s)\n" "${0##*/}" "${cmds// /|}"
}

x_gitconfig() {
  #info "Configuring Git"

  # The .gitconfig will be overwritten; reconfigure it.
  echo "Configuring global .gitignore"
  git config --global core.excludesfile ~/.gitignore_global
  git config --global user.name "qwertimer"
  git config --global user.email delltim@gmail.com
  git config --global core.editor vim
  git config --global merge.tool meld
  git config --global diff.external meld

}
x_gitconfigw() {
  info "Configuring Git for work"

  # The .gitconfig will be overwritten; reconfigure it.
  echo "Configuring global .gitignore"
  git config --global core.excludesfile ~/.gitignore_global

  git config --global user.name "tim-polydatum"
  git config --global user.email tim@polydatum.com
  git config --global core.editor vim
  git config --global merge.tool meld
  git config --global diff.external meld

}


# --------------------------------- Utilities --------------------------------

_have()      { type "$1" &>/dev/null; }

# --------------------- completion and delegation --------------------


while IFS= read -r line; do
    [[ $line =~ ^declare\ -f\ x_ ]] || continue
    COMMANDS+=( "${line##declare -f x_}" )
done < <(declare -F)

if [[ -n $COMP_LINE ]]; then
    line=${COMP_LINE#* }
    for c in "${COMMANDS[@]}"; do
        [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
    done
    exit
fi

for c in "${COMMANDS[@]}"; do
    if [[ $c == "$EXE" ]]; then
        "x_$EXE" "$@"
        exit $?
    fi
done

declare cmd="$1"; shift
for c in "${COMMANDS[@]}"; do
    if [[ $c == "$cmd" ]]; then
        "x_$cmd" "$@"
        exit $?
    fi
done

x_usage "$@"
