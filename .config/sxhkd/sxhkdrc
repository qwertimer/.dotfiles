# wm independent hotkeys

# shutdown
ctrl + alt + Delete
  alacritty -e shutdown now

# Config Editor with rofi
super + comma
  $HOME/.local/bin/scripts/editconfs

# Clipboard
super + v
  $HOME/.local/bin/scripts/getclips

# terminal emulator
super + x
  kitty

# launch terminal
super + Return
  kitty

# launch settings
super + s
  gnome-control-center

#
#super + {n}
#  terminews

# launch files, program launcher
super + {f, r, w, }
  {nautilus, rofi -show drun, firefox}

alt + {1, 2, 3, 4, 5, 6, 7, 8, 9, 0}
  {alacritty -e ~/.local/bin/scripts/rofi-beats, \
	}
	
# Close screen
super + shift + c
  sleep 0.5; xset dpms force standby

# Lock screen
super + l
  betterlockscreen -l 

#show help
super + slash
  $HOME/.local/bin/scripts/sxhkd-help

# make sxhkd reload its configuration files:
super + Escape
	pkill -USR1 -x sxhkd; notify-send 'sxhkd' 'Reloaded Config'

# print fullscreen
super + p 
	flameshot full -p ~/Pictures/screenshots

# print location
super + shift + p
	flameshot gui -p ~/Pictures/screenshots


# Change wallpaper
super + shift + b
    RAND=$(find "$WALLPAPERS" -xtype f | sort -R | head -1) \
        feh --bg-scale "$WALLPAPERS/$RAND"

# bspwm hotkeys
#
# hide and unhide windows
alt + u
	bspc node -g hidden=true

# unhide window
super + alt + u
    bspc node {,$(bspc query -N -n .hidden |tail -n 1)} -g hidden=off -d $(bspc query -D -d focused --names) -t floating -f
# quit/restart bspwm
super + alt + {q,r}
	bspc {quit,wm -r}

# close and kill
super + {_,shift} q
	bspc node -{c,k}

# alternate between the tiled and monocle layout
super + m
	bspc desktop -l next

# send the newest marked node to the newest preselected node
super + y
	bspc node newest.marked.local -n newest.!automatic.local

# swap the current node and the biggest window
super + g
	bspc node -s biggest.window

#
# state/flags
#

# set the window state
super + {t,shift + t,s,f}
	bspc node -t {tiled,pseudo_tiled,floating,fullscreen}

# set the node flags
super + ctrl + {m,x,y,z}
	bspc node -g {marked,locked,sticky,private}

#
# focus/swap
#

# focus the node in the given direction
super + {_,shift + }{h,j,k,l}
	bspc node -{f,s} {west,south,north,east}

# focus the node for the given path jump
super + {p,b,comma,period}
	bspc node -f @{parent,brother,first,second}

# focus the next/previous window in the current desktop
super + {_,shift + }c
	bspc node -f {next,prev}.local.!hidden.window

# focus the next/previous desktop in the current monitor
super + bracket{left,right}
	bspc desktop -f {prev,next}.local

# focus the last node/desktop
super + {grave,Tab}
	bspc {node,desktop} -f last

# focus the older or newer node in the focus history
super + {o,i}
	bspc wm -h off; \
	bspc node {older,newer} -f; \
	bspc wm -h on

# focus or send to the given desktop
super + {_,shift + }{1-9,0}
	bspc {desktop -f,node -d} '^{1-9,10}'

#
# preselect
#

# preselect the direction
super + ctrl + {h,j,k,l}
	bspc node -p {west,south,north,east}

# preselect the ratio
super + ctrl + {1-9}
	bspc node -o 0.{1-9}

# cancel the preselection for the focused node
super + ctrl + space
	bspc node -p cancel

# cancel the preselection for the focused desktop
super + ctrl + shift + space
	bspc query -N -d | xargs -I id -n 1 bspc node id -p cancel

#
# move/resize
#

# expand a window by moving one of its side outward
super + alt + {h,j,k,l}
	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}

# contract a window by moving one of its side inward
super + alt + shift + {h,j,k,l}
	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}

# move a floating window
super + {Left,Down,Up,Right}
	bspc node -v {-20 0,0 20,0 -20,20 0}

# change window gap closer
super + alt + equal
	bspc config window_gap $(expr $(bspc config window_gap) - 3)

# change window gap furthur
super + alt + minus
	bspc config window_gap $(expr $(bspc config window_gap) + 3)	


#xf86 commands
# volume control lower
XF86AudioLowerVolume
	amixer set Master 5%-

# volume control raise
XF86AudioRaiseVolume
	amixer set Master 5%+
# Toggle mute
XF86AudioMute
  amixer set Master toggle

# brightness up or down 2
XF86MonBrightness{Down,Up}
	xbacklight -{dec,inc} 2

# brightness up or down 10
shift + XF86MonBrightness{Down,Up}
	xbacklight -{dec,inc} 10

# System stats
XF86Tools; f
	notify-send Sensors "Internal temperature is <b>`sensors | grep -A 0 temp1 | cut -c16-21`</b> with fans at <b>`sensors | grep -A 0 fan | cut -c14-21`</b>."

# Show battery
XF86LaunchA; b
	notify-send Power "`acpi | grep "Battery 0"`\n``"

# Check internet
XF86LaunchA; p
	notify-send Ping "\n`ping -c1 8.8.8.8`"

# Show Notes
XF86LaunchA; n
	notify-send "Notes" "\n`cat ~/notes`"

# Show tailscale
XF86LaunchA; shift + t
	$HOME/.local/bin/scripts/tss
#XF86AudioPlay
#XF86AudioPrev
#XF86AudioNext



# scripts specific funtionality

# torrent something
super + a; super + t
	~/.scripts/xclip/torrent

# download youtube
super + a; super + v
	~/.scripts/xclip/youtube

# generate password
super + a; super + p
	~/.scripts/dmenu/genpass

#show tailscale
ctrl + alt + h
	$HOME/.local/bin/scripts/tss

# show clippings from greenclip
ctrl + alt + m
	$HOME/.local/bin/scripts/getclips

alt + s
	id=$(bspc query -N -n "focused");\
	if [ -n "$id" ];then \
		xprop -id $id -f _SCRATCH 32ii -set _SCRATCH $(date +%s,%N);\
		bspc node -t "floating";\
		xdotool windowunmap $id;\
	fi

super + alt + s
	i=$(bspc query -N -n "focused.floating");\
	if [ -n "$i" ];then \
		xprop -id $i -f _SCRATCH 32ii -set _SCRATCH $(date +%s,%N);\
		xdotool windowunmap $i;\
	else;\
		i=$(for w in $(xwininfo -root -children | grep -e "^\s*0x[0-9a-f]\+" -o);do \
			t=$(xprop -id $w _SCRATCH | grep ' = \(.*\)');\
			if [ -n "$t" ];then \
				echo $t $w;\
			fi;\
		done|sort -n|head -n1|cut -d" " -f 5);\
		if [ -n "$i" ];then \
			xprop -id $i -remove _SCRATCH;\
			bspc rule -a \* state=floating center=on --one-shot;\
			xdotool windowmap $i;\
			bspc node -f $i;\
		fi;\
	fi
